package top.jonakls.cgmedic.app.login;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import top.jonakls.cgmedic.api.entity.account.UserAccountEntity;
import top.jonakls.cgmedic.api.util.PasswordUtil;
import top.jonakls.cgmedic.app.history.doctor.FormHistory;
import top.jonakls.cgmedic.app.history.user.UserHistory;
import top.jonakls.cgmedic.app.register.UserRegister;
import top.jonakls.cgmedic.app.util.GenericUtil;
import top.jonakls.cgmedic.core.service.entity.account.SimpleAccountService;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class UserLogin extends JFrame {

    private JPanel panel1;
    private JLabel usernameLabel;
    private JTextField userNameFile;
    private JLabel passwordLabel;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton exitButton;
    private JButton registerButton;
    private final SimpleAccountService accountService;


    public UserLogin(SimpleAccountService accountService) {
        super("CgMedic | Inicio de sesión");
        this.accountService = accountService;
        super.setContentPane(panel1);
        super.setSize(600, 400);
        super.setLocationRelativeTo(null);
        super.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        registerButton.addActionListener(e -> {
            UserRegister register = new UserRegister(this.accountService);
            register.setVisible(true);
            register.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
            this.dispose();
        });

        loginButton.addActionListener(e -> {
            String userName = userNameFile.getText();
            String password = String.valueOf(passwordField.getPassword());
            this.loginProcess(userName, password);
        });

        exitButton.addActionListener(e -> this.dispose());
    }

    private void loginProcess(String userName, String password) {
        UserAccountEntity user = this.accountService.get(userName);

        if (user == null) {
            this.accountService.load(userName);
            user = this.accountService.get(userName);

            if (user == null) {
                JOptionPane.showMessageDialog(
                        this,
                        "El usuario " + userName + " no existe.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
                return;
            }
        }

        if (!PasswordUtil.compare(password, user.password())) {
            JOptionPane.showMessageDialog(
                    this,
                    "Contraseña incorrecta.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }

        GenericUtil.showWelcomeMessage(this, userName);
        System.out.println(user.role());

        switch (user.role()) {
            case ADMIN:
                System.out.println("Admin");
                GenericUtil.showInfoMessage(
                        this,
                        "Lamentamos informarles que los desarrolladores no han implementado una interfaz para el rol ADMIN.\nSeguramente están gastando su salario"
                );
                break;
            case MEDIC:
                this.sendToMedicHistory(user);
                break;
            case PATIENT:
                this.sendToUserHistory(user);
                break;
            default:
                JOptionPane.showMessageDialog(
                        this,
                        "El usuario " + userName + " no tiene un rol asignado.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                );
                break;
        }

    }

    private void sendToUserHistory(UserAccountEntity user) {
        UserHistory history = new UserHistory(user, this.accountService);
        history.setVisible(true);
        this.dispose();
    }

    private void sendToMedicHistory(UserAccountEntity user) {
        FormHistory history = new FormHistory(user, this.accountService);
        history.setVisible(true);
        this.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(12, 7, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-3479560));
        usernameLabel = new JLabel();
        usernameLabel.setBackground(new Color(-16777216));
        Font usernameLabelFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 14, usernameLabel.getFont());
        if (usernameLabelFont != null) usernameLabel.setFont(usernameLabelFont);
        usernameLabel.setForeground(new Color(-16777216));
        usernameLabel.setText("Usuario");
        panel1.add(usernameLabel, new GridConstraints(5, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        registerButton = new JButton();
        registerButton.setBackground(new Color(-14918244));
        Font registerButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 14, registerButton.getFont());
        if (registerButtonFont != null) registerButton.setFont(registerButtonFont);
        registerButton.setForeground(new Color(-1));
        registerButton.setText("Registrarse");
        panel1.add(registerButton, new GridConstraints(10, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 6, 12, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setBackground(new Color(-14918244));
        loginButton.setBorderPainted(true);
        loginButton.setFocusable(true);
        Font loginButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 14, loginButton.getFont());
        if (loginButtonFont != null) loginButton.setFont(loginButtonFont);
        loginButton.setForeground(new Color(-1));
        loginButton.setText("Ingresar");
        panel1.add(loginButton, new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        passwordLabel = new JLabel();
        Font passwordLabelFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 14, passwordLabel.getFont());
        if (passwordLabelFont != null) passwordLabel.setFont(passwordLabelFont);
        passwordLabel.setForeground(new Color(-16777216));
        passwordLabel.setText("Contraseña");
        panel1.add(passwordLabel, new GridConstraints(7, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        passwordField = new JPasswordField();
        passwordField.setBackground(new Color(-1));
        passwordField.setColumns(35);
        Font passwordFieldFont = this.$$$getFont$$$("Century Gothic", -1, 14, passwordField.getFont());
        if (passwordFieldFont != null) passwordField.setFont(passwordFieldFont);
        passwordField.setForeground(new Color(-16777216));
        passwordField.setToolTipText("Contraseña");
        panel1.add(passwordField, new GridConstraints(7, 2, 2, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(0, 0, 12, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel1.add(spacer3, new GridConstraints(11, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        userNameFile = new JTextField();
        userNameFile.setBackground(new Color(-1));
        userNameFile.setColumns(35);
        Font userNameFileFont = this.$$$getFont$$$("Century Gothic", -1, 14, userNameFile.getFont());
        if (userNameFileFont != null) userNameFile.setFont(userNameFileFont);
        userNameFile.setForeground(new Color(-16777216));
        userNameFile.setToolTipText("Usuario");
        panel1.add(userNameFile, new GridConstraints(5, 2, 2, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel1.add(spacer4, new GridConstraints(9, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setBackground(new Color(-14918244));
        exitButton.setBorderPainted(false);
        Font exitButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 14, exitButton.getFont());
        if (exitButtonFont != null) exitButton.setFont(exitButtonFont);
        exitButton.setForeground(new Color(-1));
        exitButton.setText("Salir");
        panel1.add(exitButton, new GridConstraints(10, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(1, 2, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        panel1.add(spacer5, new GridConstraints(0, 2, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-16777216));
        Font label1Font = this.$$$getFont$$$("Century Gothic", Font.BOLD, 24, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-16777216));
        label1.setText("Iniciar Sesión");
        panel1.add(label1, new GridConstraints(2, 2, 3, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}


